            - name: "Configure AWS Credentials" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
  uses: aws-actions/configure-aws-credentials@v4.1.0
  with:
    # AWS Region, e.g. us-east-2
    aws-region: 
    # The Amazon Resource Name (ARN) of the role to assume. Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials.
    role-to-assume: # optional
    # AWS Access Key ID. Provide this key if you want to assume a role using access keys rather than a web identity token.
    aws-access-key-id: # optional
    # AWS Secret Access Key. Required if aws-access-key-id is provided.
    aws-secret-access-key: # optional
    # AWS Session Token.
    aws-session-token: # optional
    # Use the web identity token file from the provided file system path in order to assume an IAM role using a web identity, e.g. from within an Amazon EKS worker node.
    web-identity-token-file: # optional
    # Use existing credentials from the environment to assume a new role, rather than providing credentials as input.
    role-chaining: # optional
    # The audience to use for the OIDC provider
    audience: # optional, default is sts.amazonaws.com
    # Proxy to use for the AWS SDK agent
    http-proxy: # optional
    # Whether to mask the AWS account ID for these credentials as a secret value. By default the account ID will not be masked
    mask-aws-account-id: # optional
    # Role duration in seconds. Default is one hour.
    role-duration-seconds: # optional
    # The external ID of the role to assume.
    role-external-id: # optional
    # Role session name (default: GitHubActions)
    role-session-name: # optional
    # Skip session tagging during role assumption
    role-skip-session-tagging: # optional
    # Define an inline session policy to use when assuming a role
    inline-session-policy: # optional
    # Define a list of managed session policies to use when assuming a role
    managed-session-policies: # optional
    # Whether to set credentials as step output
    output-credentials: # optional
    # Whether to unset the existing credentials in your runner. May be useful if you run this action multiple times in the same job
    unset-current-credentials: # optional
    # Whether to disable the retry and backoff mechanism when the assume role call fails. By default the retry mechanism is enabled
    disable-retry: # optional
    # The maximum number of attempts it will attempt to retry the assume role call. By default it will retry 12 times
    retry-max-attempts: # optional
    # Some environments do not support special characters in AWS_SECRET_ACCESS_KEY. This option will retry fetching credentials until the secret access key does not contain special characters. This option overrides disable-retry and retry-max-attempts. This option is disabled by default
    special-characters-workaround: # optional
    # When enabled, this option will check if there are already valid credentials in the environment. If there are, new credentials will not be fetched. If there are not, the action will run as normal.
    use-existing-credentials: # optional
          

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Development Infrastruce Provisioning Using Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-region: ap-south-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
