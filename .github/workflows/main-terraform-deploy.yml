name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Development Infrastruce Provisioning Using Terraform'
    runs-on: ubuntu-latest
    environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-region: ap-south-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Get GitHub runner IP
      run: |
        ip=$(curl -s https://checkip.amazonaws.com)
        echo "RUNNER_IP=$(curl -s https://checkip.amazonaws.com)/32" >> $GITHUB_ENV

    - name: Writing tfvars
      working-directory: ./terraform
      run: |
          cat <<EOF > terraform.tfvars
          vpc_cidr_block = "10.0.0.0/16"
          subnet_cidr_block = "10.0.10.0/24"
          availability_zone = "ap-south-1a"
          env_prefix = "github-actions-dev"
          allowed_ips = ["${{ secrets.MY_IP }}", "${{env.RUNNER_IP}}"]
          instance_type = "t2.micro"
          ssh_key = "${{ secrets.SSH_KEY }}"

    - name: Get SSH KEY AND SET PERMISSION
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Format
      run: terraform fmt -recursive
      working-directory: ./terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform

    - name: Writing vars file for ansible start container role
      working-directory: ./ansible/roles/start_container
      run: |
          mkdir vars
          cd vars
          cat <<EOF > main.yaml
          docker_registry: "${{ secrets.DOCKER_REGISTRY }}"
          docker_username: "${{ secrets.DOCKER_USERNAME }}"
          docker_password: "${{ secrets.DOCKER_PASSWORD }}"
          EOF

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ./terraform